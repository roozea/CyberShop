#!/bin/bash

# Colores para mensajes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Procesar argumentos
WITH_GUIDE=false
for arg in "$@"
do
    case $arg in
        --with-guide)
        WITH_GUIDE=true
        shift
        ;;
    esac
done

# Mostrar modo de instalaci√≥n
if [ "$WITH_GUIDE" = true ]; then
    echo -e "${GREEN}üöÄ Iniciando instalaci√≥n de CyberShop Vulnerable Lab (Modo: Con Gu√≠a)...${NC}"
else
    echo -e "${GREEN}üöÄ Iniciando instalaci√≥n de CyberShop Vulnerable Lab (Modo: Evaluaci√≥n)...${NC}"
fi

# Verificar si se est√° ejecutando como root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}Este script debe ejecutarse como root (sudo)${NC}"
    exit 1
fi

# Actualizar sistema
echo -e "${YELLOW}üì¶ Actualizando sistema...${NC}"
apt-get update
apt-get upgrade -y

# Instalar dependencias b√°sicas
echo -e "${YELLOW}üì¶ Instalando dependencias b√°sicas...${NC}"
apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common \
    git \
    make

# Instalar Docker
echo -e "${YELLOW}üê≥ Instalando Docker...${NC}"
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
usermod -aG docker $SUDO_USER

# Instalar Docker Compose
echo -e "${YELLOW}üê≥ Instalando Docker Compose...${NC}"
curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# Verificar instalaciones
echo -e "${YELLOW}‚úÖ Verificando instalaciones...${NC}"
docker --version
docker-compose --version

# Clonar repositorio
echo -e "${YELLOW}üì• Clonando repositorio...${NC}"
if [ -d "CyberShop" ]; then
    echo -e "${YELLOW}El directorio CyberShop ya existe. Actualizando...${NC}"
    cd CyberShop
    git pull origin feature/vulnerable-app
else
    git clone https://github.com/roozea/CyberShop.git
    cd CyberShop
    git checkout feature/vulnerable-app
fi

# Eliminar gu√≠a si no se solicit√≥
if [ "$WITH_GUIDE" = false ]; then
    echo -e "${YELLOW}üîí Modo evaluaci√≥n: Eliminando gu√≠a de vulnerabilidades...${NC}"
    rm -f VULNERABILITIES.md
fi

# Configurar permisos
echo -e "${YELLOW}üîí Configurando permisos...${NC}"
chown -R $SUDO_USER:$SUDO_USER .
chmod +x Makefile

# Desplegar aplicaci√≥n
echo -e "${YELLOW}üöÄ Desplegando aplicaci√≥n...${NC}"
make install

# Verificar estado
echo -e "${YELLOW}‚úÖ Verificando estado de los contenedores...${NC}"
docker ps

echo -e "${GREEN}‚ú® Instalaci√≥n completada exitosamente!${NC}"
echo -e "${YELLOW}üìù La aplicaci√≥n est√° disponible en:${NC}"
echo -e "   Frontend: http://localhost:3000"
echo -e "   Backend API: http://localhost:8000"
echo -e "   API Docs: http://localhost:8000/docs"

if [ "$WITH_GUIDE" = true ]; then
    echo -e "${YELLOW}üìö La gu√≠a de vulnerabilidades est√° disponible en: VULNERABILITIES.md${NC}"
else
    echo -e "${YELLOW}üìù Modo evaluaci√≥n: La gu√≠a de vulnerabilidades no est√° incluida${NC}"
fi

echo -e "${RED}‚ö†Ô∏è  ADVERTENCIA: Esta aplicaci√≥n es intencionalmente vulnerable.${NC}"
echo -e "${RED}‚ö†Ô∏è  NO USAR EN PRODUCCI√ìN${NC}"

# Instrucciones post-instalaci√≥n
echo -e "\n${YELLOW}üìå Comandos √∫tiles:${NC}"
echo -e "   - make help     : Ver todos los comandos disponibles"
echo -e "   - make stop     : Detener la aplicaci√≥n"
echo -e "   - make clean    : Limpiar contenedores y vol√∫menes"
echo -e "   - make dev      : Iniciar en modo desarrollo"

# Mostrar informaci√≥n sobre modos de instalaci√≥n
echo -e "\n${YELLOW}üìå Modos de instalaci√≥n:${NC}"
echo -e "   - ./install.sh          : Modo evaluaci√≥n (sin gu√≠a)"
echo -e "   - ./install.sh --with-guide : Modo revisi√≥n (con gu√≠a)"
